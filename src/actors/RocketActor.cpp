#include <actors/RocketActor.h>

#include <dtCore/transform.h>

////////////////////////////////////////////////////////////////////////////////
static const float ROCKET_SPEED = 1.0f;
static const float ROCKET_LIFETIME = 2.5f;
static const float ROCKET_ARMING_DELAY = 0.25f;

//////////////////////////////////////////////////////////////////////////
RocketActor::RocketActor(dtGame::GameActorProxy& proxy)
: ProjectileActor(proxy)
{
   SetLifetime(ROCKET_LIFETIME);
   SetArmingDelay(ROCKET_ARMING_DELAY);
}

//////////////////////////////////////////////////////////////////////////
RocketActor::~RocketActor()
{
}

///////////////////////////////////////////////////////////////////////////////
void RocketActor::TickLocal(const dtGame::Message& msg)
{
   ProjectileActor::TickLocal(msg);

   dtCore::Transform currentTransform;
   GetTransform(currentTransform);
   osg::Vec3 right, up, forward, translation;
   currentTransform.GetOrientation(right, up, forward);
   currentTransform.GetTranslation(translation);
   currentTransform.SetTranslation(translation + forward * ROCKET_SPEED);
   SetTransform(currentTransform);
}

///////////////////////////////////////////////////////////////////////////////
void RocketActor::OnEnteredWorld()
{
   SetMeshResource("Boat:TorpedoType1.IVE");
}

////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
RocketActorProxy::RocketActorProxy()
{

}

///////////////////////////////////////////////////////////////////////////////
RocketActorProxy::~RocketActorProxy()
{

}

///////////////////////////////////////////////////////////////////////////////
void RocketActorProxy::CreateActor()
{
   RocketActor* pActor = new RocketActor(*this);
   SetActor(*pActor);
}

////////////////////////////////////////////////////////////////////////////////

